// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// find_gaps
SEXP find_gaps(std::string seq);
RcppExport SEXP genoslideR_find_gaps(SEXP seqSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string seq = Rcpp::as<std::string >(seqSEXP);
    SEXP __result = find_gaps(seq);
    return Rcpp::wrap(__result);
END_RCPP
}
// make_gapped_ranges
Rcpp::S4 make_gapped_ranges(IntegerVector start, IntegerVector end, Rcpp::S4 gaprange);
RcppExport SEXP genoslideR_make_gapped_ranges(SEXP startSEXP, SEXP endSEXP, SEXP gaprangeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    IntegerVector start = Rcpp::as<IntegerVector >(startSEXP);
    IntegerVector end = Rcpp::as<IntegerVector >(endSEXP);
    Rcpp::S4 gaprange = Rcpp::as<Rcpp::S4 >(gaprangeSEXP);
    Rcpp::S4 __result = make_gapped_ranges(start, end, gaprange);
    return Rcpp::wrap(__result);
END_RCPP
}
// make_ungapped_ranges
Rcpp::S4 make_ungapped_ranges(IntegerVector start, IntegerVector end, CharacterVector nm, Rcpp::S4 gaprange);
RcppExport SEXP genoslideR_make_ungapped_ranges(SEXP startSEXP, SEXP endSEXP, SEXP nmSEXP, SEXP gaprangeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    IntegerVector start = Rcpp::as<IntegerVector >(startSEXP);
    IntegerVector end = Rcpp::as<IntegerVector >(endSEXP);
    CharacterVector nm = Rcpp::as<CharacterVector >(nmSEXP);
    Rcpp::S4 gaprange = Rcpp::as<Rcpp::S4 >(gaprangeSEXP);
    Rcpp::S4 __result = make_ungapped_ranges(start, end, nm, gaprange);
    return Rcpp::wrap(__result);
END_RCPP
}
// update_genomic_position_cpp
void update_genomic_position_cpp(Rcpp::S4 cut_ranges, Rcpp::S4 genomic_hit_ranges, Rcpp::S4 alignment_hit_ranges, Rcpp::IntegerVector strand);
RcppExport SEXP genoslideR_update_genomic_position_cpp(SEXP cut_rangesSEXP, SEXP genomic_hit_rangesSEXP, SEXP alignment_hit_rangesSEXP, SEXP strandSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::S4 cut_ranges = Rcpp::as<Rcpp::S4 >(cut_rangesSEXP);
    Rcpp::S4 genomic_hit_ranges = Rcpp::as<Rcpp::S4 >(genomic_hit_rangesSEXP);
    Rcpp::S4 alignment_hit_ranges = Rcpp::as<Rcpp::S4 >(alignment_hit_rangesSEXP);
    Rcpp::IntegerVector strand = Rcpp::as<Rcpp::IntegerVector >(strandSEXP);
    update_genomic_position_cpp(cut_ranges, genomic_hit_ranges, alignment_hit_ranges, strand);
    return R_NilValue;
END_RCPP
}
// update_alignment_position_cpp
void update_alignment_position_cpp(Rcpp::S4 cut_ranges, Rcpp::S4 genomic_hit_ranges, Rcpp::S4 alignment_hit_ranges, Rcpp::IntegerVector strand);
RcppExport SEXP genoslideR_update_alignment_position_cpp(SEXP cut_rangesSEXP, SEXP genomic_hit_rangesSEXP, SEXP alignment_hit_rangesSEXP, SEXP strandSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::S4 cut_ranges = Rcpp::as<Rcpp::S4 >(cut_rangesSEXP);
    Rcpp::S4 genomic_hit_ranges = Rcpp::as<Rcpp::S4 >(genomic_hit_rangesSEXP);
    Rcpp::S4 alignment_hit_ranges = Rcpp::as<Rcpp::S4 >(alignment_hit_rangesSEXP);
    Rcpp::IntegerVector strand = Rcpp::as<Rcpp::IntegerVector >(strandSEXP);
    update_alignment_position_cpp(cut_ranges, genomic_hit_ranges, alignment_hit_ranges, strand);
    return R_NilValue;
END_RCPP
}
